
The '7-base_geometry' module
======================

Using `BaseGeometry`
-------------------

test for a class that creates a new object based on a list:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Instanciate class

    >>> bg = BaseGeometry()

Working test:

    >>> bg.integer_validator("my_int", 12)

Age 0:

    >>> bg.integer_validator("my_int", 0)
    Traceback (most recent call last):
    ...
    ValueError: my_int must be greater than 0

    >>> bg.integer_validator("power", 0)
    Traceback (most recent call last):
    ...
    ValueError: power must be greater than 0

Age negative:

    >>> bg.integer_validator("my_int", -1)
    Traceback (most recent call last):
    ...
    ValueError: my_int must be greater than 0

    >>> bg.integer_validator("power", -1000)
    Traceback (most recent call last):
    ...
    ValueError: power must be greater than 0

Age not int:

    >>> bg.integer_validator("power", 2.5)
    Traceback (most recent call last):
    ...
    TypeError: power must be an integer

    >>> bg.integer_validator("power", "2.5")
    Traceback (most recent call last):
    ...
    TypeError: power must be an integer

Age special num cases:

    >>> bg.integer_validator("power", float('nan'))
    Traceback (most recent call last):
    ...
    TypeError: power must be an integer

    >>> bg.integer_validator("power", float('inf'))
    Traceback (most recent call last):
    ...
    TypeError: power must be an integer